// user_main.c
// Copyright 2017 Lukas Friedrichsen
// License: Modified BSD-License
//
// 2017-02-28

#include "ets_sys.h"
#include "mem.h"
#include "gpio.h"
#include "osapi.h"
#include "os_type.h"
#include "user_interface.h"
#include "/home/lukas/Espressif/libs_extern/ESP-I2C-OLED-SSD1306/include/ssd1306.h"
#include "/home/lukas/Espressif/libs_extern/ESP-I2C-OLED-SSD1306/include/i2c.h"
#include "../include/user_config.h"

// Set WiFI-scan-mode
static struct scan_config config = {(uint8_t*) &SSID, NULL, 0, 1};

os_event_t *task_queue;
os_timer_t blink_timer;

// We'll have to use a string builder in form of os_sprintf(...) in the output
// task later on because of the data format in which data is communicated between
// tasks. Therefore we allocate a buffer here once to avoid having to do this on
// each call of the method anew.
char string_buffer[64]; // 128 bit screenwidth / (minimal width per character of
                        // 1 bit as well as 1 bit space between two characters)
                        // = 64 characters per line at max

// Measures the wireless-networks RSSI-value (attention: status is OK if
// no error occured during the scan, although no access-point might have been
// found, so you have to check for arg != NULL (no access-point found) as well)
void ICACHE_FLASH_ATTR measureRSSI(void *arg, STATUS status) {
  if (status == OK && arg) {
    os_printf("SSID found!\n");
    struct bss_info *bss = (struct bss_info *) arg;
    if (bss->rssi > BLINK_THRESHOLD) {
      os_timer_arm(&blink_timer, 500, 1);
    }
    else {
      os_timer_disarm(&blink_timer);
    }
    system_os_post(TASK_PRIO_0, SIG_PRINT, bss->rssi);
  }
  else {
    os_printf("SSID not found!\n");
    os_timer_disarm(&blink_timer);
    gpio_output_set(BIT2, 0, BIT2, 0);
    system_os_post(TASK_PRIO_0, SIG_PRINT, 0);
  }
}

// Scans the currently received wireless-networks for the specified SSID
void ICACHE_FLASH_ATTR scanRSSI_task(os_event_t *events) {
  wifi_station_scan(NULL, measureRSSI);
}

// Prints the received message to the given data sink
void ICACHE_FLASH_ATTR output_task(os_event_t *events) {
  os_sprintf(string_buffer, (char *) "RSSI:   %d", (sint8) events->par);
  switch (events->sig) {
    case SIG_PRINT:
      os_printf("RSSI of SSID %s:   %d\n", SSID, (sint8) events->par);
      ssd1306_clear(1);
      ssd1306_draw_string(1, 0, 0, (char *) SSID, SSD1306_COLOR_WHITE, SSD1306_COLOR_TRANSPARENT);
      if ((sint8) events->par) {
        ssd1306_draw_string(1, 0, 12, (char *) "Status:   found", SSD1306_COLOR_WHITE, SSD1306_COLOR_TRANSPARENT);
      }
      else {
        ssd1306_draw_string(1, 0, 12, (char *) "Status:   not found", SSD1306_COLOR_WHITE, SSD1306_COLOR_TRANSPARENT);
      }
      ssd1306_draw_string(1, 0, 24, string_buffer, SSD1306_COLOR_WHITE, SSD1306_COLOR_TRANSPARENT);
      ssd1306_refresh(1, 1);
    default:
      break;
  }
  //os_delay_us(1000);
  system_os_post(TASK_PRIO_1, SIG_RUN, 0);
}

// Flashes the onboard-LED
void ICACHE_FLASH_ATTR blink_timerfunc(void *arg) {
  if (GPIO_REG_READ(GPIO_OUT_ADDRESS) & BIT2) {
    // Set gpio high
    gpio_output_set(0, BIT2, BIT2, 0);
  }
  else {
    // Set gpio low
    gpio_output_set(BIT2, 0, BIT2, 0);
  }
}

// Initialize WiFi-station-mode
void ICACHE_FLASH_ATTR wifi_init() {
  wifi_set_opmode(STATION_MODE);
  wifi_station_set_auto_connect(false);
}

// Initializiation
void ICACHE_FLASH_ATTR user_init() {
  os_printf("Initializing...\n");

  // Malloc message queue
  task_queue = (os_event_t *) os_malloc(sizeof((os_event_t)*TASK_QUEUE_LENGTH));

  // Initialize gpio, i2c and WiFi
  gpio_init();
  i2c_init();
  wifi_init();

  // Initialize display
  ssd1306_init(1);
  ssd1306_clear(1);
  ssd1306_select_font(1, 1);

  // Set GPIO2 (onboard-LED) to output mode
  PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO2_U, FUNC_GPIO2);
  gpio_output_set(BIT2, 0, BIT2, 0);

  os_printf("Setting callback for the timer...\n");

  // Set up timer
  os_timer_disarm(&blink_timer);
  os_timer_setfn(&blink_timer, (os_timer_func_t *) blink_timerfunc, NULL);

  os_printf("Registering tasks...\n");

  // Register tasks
  system_os_task(scanRSSI_task, TASK_PRIO_1, task_queue, TASK_QUEUE_LENGTH);
  system_os_task(output_task, TASK_PRIO_0, task_queue, TASK_QUEUE_LENGTH);

  // Start the tasks
  system_os_post(TASK_PRIO_1, SIG_RUN, 0);
}

/******************************************************************************
 * FunctionName : user_rf_cal_sector_set
 * Description  : SDK just reversed 4 sectors, used for rf init data and paramters.
 *                We add this function to force users to set rf cal sector, since
 *                we don't know which sector is free in user's application.
 *                sector map for last several sectors : ABBBCDDD
 *                A : rf cal
 *                B : at parameters
 *                C : rf init data
 *                D : sdk parameters
 * Parameters   : none
 * Returns      : rf cal sector
*******************************************************************************/
uint32 ICACHE_FLASH_ATTR user_rf_cal_sector_set(void) {
    enum flash_size_map size_map = system_get_flash_size_map();
    uint32 rf_cal_sec = 0;

    switch (size_map) {
      case FLASH_SIZE_4M_MAP_256_256:
        rf_cal_sec = 128 - 8;
        break;

      case FLASH_SIZE_8M_MAP_512_512:
        rf_cal_sec = 256 - 5;
        break;

      case FLASH_SIZE_16M_MAP_512_512:
      case FLASH_SIZE_16M_MAP_1024_1024:
        rf_cal_sec = 512 - 5;
        break;

      case FLASH_SIZE_32M_MAP_512_512:
      case FLASH_SIZE_32M_MAP_1024_1024:
        rf_cal_sec = 1024 - 5;
        break;

      default:
        rf_cal_sec = 0;
        break;
    }

    return rf_cal_sec;
}

void ICACHE_FLASH_ATTR user_rf_pre_init(void) {
  // Nothing to do...
}
